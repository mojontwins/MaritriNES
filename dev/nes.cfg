MEMORY {
    HEADER: 	start = $0, size = $10, file = %O ,fill = yes;

    # ROM
    PRG: 		start = $8000, size = $7fc0, file = %O ,fill = yes, define = yes;
    RJM: 		start = $ffc0, size = $3a, file = %O, fill = yes;
    VECTORS: 	start = $7ffa, size = $6, file = %O, fill = yes;

    # CHR
    CHR: 		start = $0000, size = $2000, file = %O, fill = yes;

    # RAM
    ZP:			start = $0000, size = $100, type = rw, define = yes;
    RAM: 		start = $0338, size = $04C8, define = yes;
}

SEGMENTS {
    HEADER:   load = HEADER,         type = ro;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes;
    RODATA:   load = PRG,            type = ro,  define = yes;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = VECTORS,        type = rw;
    ROMCHGR:  load = RJM,			 type = rw;
    CHARS:    load = CHR,            type = rw;
    BSS:      load = RAM,            type = bss, define = yes;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {
    CONDES: segment = INIT,
        type = constructor,
        label = __CONSTRUCTOR_TABLE__,
        count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
        type = destructor,
        label = __DESTRUCTOR_TABLE__,
        count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
        segment = RODATA,
        label = __INTERRUPTOR_TABLE__,
        count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
    __STACKSIZE__: type = weak, value = $04C8;      # 5 pages stack
}